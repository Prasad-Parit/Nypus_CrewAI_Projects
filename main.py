import os
import tkinter as tk
from tkinter import messagebox, scrolledtext
from textwrap import dedent
from dotenv import load_dotenv
from agents import Content_Creation_Agents
from tasks import Content_Creation_Tasks
from crewai import Crew
from crewai.process import Process
from langchain_openai import ChatOpenAI

# Load environment variables from the .env file
load_dotenv()

# Ensure necessary environment variables are set
api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    raise EnvironmentError("OPENAI_API_KEY is not set. Please set it in the .env file.")
os.environ["OPENAI_API_KEY"] = api_key

class ContentCreationCrew:
    def __init__(self, industry, target_audience):
        self.industry = industry
        self.target_audience = target_audience

    def run(self):
        # Initialize custom agents and tasks
        agents = Content_Creation_Agents()
        tasks = Content_Creation_Tasks()

        # Define specific agents for roles
        trend_researcher = agents.trend_researcher()
        seo_writer = agents.seo_content_writer()
        social_media_specialist = agents.social_media_specialist()
        email_marketer = agents.email_marketing_specialist()
        ecommerce_copywriter = agents.ecommerce_copywriter()
        video_scriptwriter = agents.video_scriptwriter()
        infographic_designer = agents.infographic_designer()
        content_coordinator = agents.content_coordinator()
        
        # Define tasks and assign them to agents
        trend_task = tasks.trend_research(
            agent=trend_researcher,
            query=f"latest trends for 2024 on {self.industry} for {self.target_audience}",
            expected_output="A curated list of 10-15 trending blog post ideas."
        )

        # Execute the trend task and retrieve the output
        trend_task_output = trend_task.execute()  # Execute and fetch the output
        print("Trend Task Output:", trend_task_output)  # Debugging step

        # Parse the blog ideas from the trend task output
        blog_ideas = []
        if isinstance(trend_task_output, str):
            # Extract lines containing blog titles (lines starting with a number)
            blog_ideas = [
                line.strip()
                for line in trend_task_output.split("\n")
                if line.strip() and line[0].isdigit()
            ]
        elif isinstance(trend_task_output, dict) and "blog_ideas" in trend_task_output:
            blog_ideas = trend_task_output["blog_ideas"]
        else:
            raise ValueError("Unexpected output format from trend_task.")

        if not blog_ideas:
            raise ValueError("No blog ideas generated by the trend task.")

        # Define the SEO content creation task
        seo_task = tasks.seo_content_creation(
            agent=seo_writer,
            blog_ideas=blog_ideas,  # Pass the parsed blog ideas
            expected_output="SEO-optimized articles ready for publication."
        )

        # Execute the SEO task
        seo_articles_output = seo_task.execute()
        print("SEO Articles Output:", seo_articles_output)

        social_media_task = tasks.social_media_strategy(
            agent=social_media_specialist,
            blog_ideas=trend_task.description,
            expected_output="A set of 5-10 tailored social media posts for each platform."
        )

        email_campaign_task = tasks.email_campaign_development(
            agent=email_marketer,
            expected_output="A complete email newsletter template ready for distribution."
        )

        ecommerce_task = tasks.ecommerce_copywriting(
            agent=ecommerce_copywriter,
            product_details="A list of products with their features, benefits, and target audience details.",
            expected_output="A collection of compelling product descriptions ready for e-commerce listings."
        )   


        video_script_task = tasks.video_script_writing(
            agent=video_scriptwriter,
            expected_output="Completed video scripts ready for production."
        )

        infographic_task = tasks.infographic_design(
            agent=infographic_designer,
            expected_output="High-quality infographics ready for publication or sharing."
        )

        review_task = tasks.review_and_coordination(
            agent=content_coordinator,
            expected_output="Finalized content assets ready for deployment"
        )

        # Assemble the crew and tasks
        crew = Crew(
            agents=[ 
                trend_researcher, 
                seo_writer, 
                social_media_specialist, 
                email_marketer, 
                ecommerce_copywriter, 
                video_scriptwriter, 
                infographic_designer, 
                content_coordinator
            ],
            tasks=[ 
                trend_task, 
                seo_task, 
                social_media_task, 
                email_campaign_task, 
                ecommerce_task, 
                video_script_task, 
                infographic_task, 
                review_task
            ],
            verbose=True,
            
        )

        # Execute the workflow
        result = crew.kickoff()
        return result

# GUI Application
class ContentCreationApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Content Creation Crew")
        self.root.geometry("600x600")

        # Label for industry input
        self.industry_label = tk.Label(root, text="Enter the target industry for content creation (e.g., Tech, Fashion, Healthcare):")
        self.industry_label.pack(pady=10)

        # Entry field for industry
        self.industry_entry = tk.Entry(root, width=50)
        self.industry_entry.pack(pady=5)

        # Label for target audience input
        self.target_audience_label = tk.Label(root, text="Enter the primary target audience (e.g., young professionals, parents, students):")
        self.target_audience_label.pack(pady=10)

        # Entry field for target audience
        self.target_audience_entry = tk.Entry(root, width=50)
        self.target_audience_entry.pack(pady=5)

        # Submit button
        self.submit_button = tk.Button(root, text="Generate Content", command=self.generate_content)
        self.submit_button.pack(pady=20)

        # Output field (scrollable text)
        self.output_text = scrolledtext.ScrolledText(root, width=70, height=15)
        self.output_text.pack(pady=10)

        # Adding tag for colored text
        self.output_text.tag_configure("colored", foreground="blue", font=("Arial", 10, "bold"))

    def generate_content(self):
        industry = self.industry_entry.get().strip()
        target_audience = self.target_audience_entry.get().strip()

        if not industry or not target_audience:
            messagebox.showerror("Input Error", "Industry and target audience cannot be empty.")
            return

        try:
            # Instantiate and run the custom crew
            custom_crew = ContentCreationCrew(industry, target_audience)
            result = custom_crew.run()

            # Display results
            self.output_text.delete(1.0, tk.END)  # Clear previous output
            self.output_text.insert(tk.END, "Execution Results:\n", "colored")  # Add colored header
            self.output_text.insert(tk.END, result)  # Insert main result

        except Exception as e:
            messagebox.showerror("Execution Error", f"An error occurred during execution: {e}")


# Main entry point for the GUI
if __name__ == "__main__":
    root = tk.Tk()
    app = ContentCreationApp(root)
    root.mainloop()
